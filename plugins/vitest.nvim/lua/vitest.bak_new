-- local async = require("neotest.async")
local lib = require("neotest.lib")
local Path = require("plenary.path")
local p = Path.path

--- @param path string: the path to check
--- @return boolean: true if the path is a root project, false otherwise.
local is_root = function(path)
	local root = p.root(path)
	return root == path
end

--- @param path string: The path to start searching from.
--- @return boolean: true if the path is a git project, false otherwise.
local is_git = function(path)
	local git_root_path = Path:new(path .. p.sep .. ".git")

	return git_root_path:exists() and git_root_path:is_dir()
end

local neotest = {}

---@class Adapter
---@field name string
local adapter = {
	name = "vitest",
}

---Find the project root directory given a current directory to work from.
---It trieds to determine following:
---1. If it is a .git project and if it is then return the root directory
---2. If it is not a .git project it it uses current directory
---
---TODO: Implement the following types of the project root
---3. Determine based on the package json
---4. Determin based on the user defined configuraton
---@async
---@param dir string @Directory to treat as cwd
---@return string | nil @Absolute root dir of test suite
function adapter.root(dir)
	if is_git(dir) then
		return Path:new(dir):absolute()
	end

	-- start moving down to check for .git
	local current_path = Path:new(dir)

	local max_count = 0
	while not is_git(current_path:absolute()) and not is_root(current_path:absolute()) and max_count < 50 do
		current_path = current_path:parent()
		max_count = max_count + 1
	end

	if is_root(current_path:absolute()) then
		return dir
	end

	return current_path:absolute()
end

---Filter directories when searching for test files
---
---@async
---@param name string Name of directory
---@param rel_path string Path to directory, relative to root
---@param root string Root directory of project
---@return boolean
function adapter.filter_dir(name, rel_path, root)
	--TODO: can we use something like .gitignore to filter out directories and files
	-- Take configuration from vitest.config.ts
	-- Ignore node_modules
	if name == "node_modules" then
		return false
	end

	-- Ignore hidden directories
	if name:sub(1, 1) == "." then
		return false
	end

	return true
end

-- ViTest Default Configuration
-- include: **/*.{test,spec}.?(c|m)[jt]s?(x)
-- exclude:  **/node_modules/**, **/dist/**, **/cypress/**, **/.{idea,git,cache,output,temp}/**, **/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build,eslint,prettier}.config.*

-- Checks if a file is a test file
---@async
---@param file_path string
---@return boolean
function adapter.is_test_file(file_path)
	-- local pattern = vim.glob.to_lpeg("**/*.{test,spec}.?(c|m)[jt]s?(x)")
	-- does not like [] or ?
	local pattern = vim.glob.to_lpeg("**/*.{spec,test}.{ts,js}")

	local result = pattern:match(file_path)

	return result ~= nil
end

---Given a file path, parse all the tests within it.
---@async
---@param file_path string Absolute file path
---@return neotest.Tree | nil
function adapter.discover_positions(file_path)
	local query = [[
    ; -- Namespaces --
    ; Matches: `describe('context')`
    ((call_expression
      function: (identifier) @func_name (#eq? @func_name "describe")
      arguments: (arguments (string (string_fragment) @namespace.name) (arrow_function))
    )) @namespace.definition
    ; Matches: `describe.only('context')`
    ((call_expression
      function: (member_expression
        object: (identifier) @func_name (#any-of? @func_name "describe")
      )
      arguments: (arguments (string (string_fragment) @namespace.name) (arrow_function))
    )) @namespace.definition
    ; Matches: `describe.each(['data'])('context')`
    ((call_expression
      function: (call_expression
        function: (member_expression
          object: (identifier) @func_name (#any-of? @func_name "describe")
        )
      )
      arguments: (arguments (string (string_fragment) @namespace.name) (arrow_function))
    )) @namespace.definition

    ; -- Tests --
    ; Matches: `test('test') / it('test')`
    ((call_expression
      function: (identifier) @func_name (#any-of? @func_name "it" "test")
      arguments: (arguments (string (string_fragment) @test.name) (arrow_function))
    )) @test.definition
    ; Matches: `test.only('test') / it.only('test')`
    ((call_expression
      function: (member_expression
        object: (identifier) @func_name (#any-of? @func_name "test" "it")
      )
      arguments: (arguments (string (string_fragment) @test.name) (arrow_function))
    )) @test.definition
    ; Matches: `test.each(['data'])('test') / it.each(['data'])('test')`
    ((call_expression
      function: (call_expression
        function: (member_expression
          object: (identifier) @func_name (#any-of? @func_name "it" "test")
        )
      )
      arguments: (arguments (string (string_fragment) @test.name) (arrow_function))
    )) @test.definition
  ]]
	query = query .. string.gsub(query, "arrow_function", "function_expression")
	return lib.treesitter.parse_positions(file_path, query, { nested_tests = true })
end

---@param args neotest.RunArgs
---@return nil | neotest.RunSpec | neotest.RunSpec[]
function adapter.build_spec(args)
	local tree = args.tree
	-- this is final check before that we have to check if it is installed in node_modules
	local global_runner_exists = vim.fn.executable("vitest")

	if not global_runner_exists then
		return nil
	end
	-- local results_path = async.fn.tempname() .. ".json"
	local results_path = "/tmp/test_output.json"
	local names = {}
	while tree and tree:data().type ~= "file" do
		table.insert(names, 1, tree:data().name)
		tree = tree:parent() --[[@as neotest.Tree]]
	end
	local testNamePattern = table.concat(names, " ")
	local pos = args.tree:data()

	print("what is the position: " .. pos)
	local command = { "vitest" }
	vim.list_extend(command, {
		-- this values should be configurable
		-- "--watch=false",
		"--reporter=verbose",
		"--reporter=json",
		"--outputFile=" .. results_path,
		-- "--testNamePattern=" .. testNamePattern,
		vim.fs.normalize(pos.path),
	})

	return {
		command = command,
		-- cwd = cwd,
		context = {
			results_path = results_path,
			file = pos.path,
			-- stop_stream = stop_stream,
		},
		stream = function()
			return function()
				-- local new_results = stream_data()
				--
				-- if not new_results or new_results == "" then
				-- 	return {}
				-- end
				--
				-- local ok, parsed = pcall(vim.json.decode, new_results, { luanil = { object = true } })
				--
				-- if not ok or not parsed.testResults then
				-- 	return {}
				-- end

				return {}
			end
		end,
		-- strategy = get_strategy_config(args.strategy, command, cwd),
		-- env = getEnv(args[2] and args[2].env or {}),
	}
end

---@async
---@param spec neotest.RunSpec
---@param result neotest.StrategyResult
---@param tree neotest.Tree
---@return table<string, neotest.Result>
function adapter.results(spec, result, tree)
	-- local output_file = spec.context.results_path
	-- local success, data = pcall(lib.files.read, output_file)
	-- local ok, parsed = pcall(vim.json.decode, data, { luanil = { object = true } })
	return {
		[""] = {
			status = "passed",
			output = spec.context.results_path,
			short = "All tests passed",
		},
	}
end

local is_callable = function(obj)
	return type(obj) == "function" or (type(obj) == "table" and obj.__call)
end

local get_args = function()
	return {}
end

-- setmetatable(adapter, {
-- 	__call = function(_, opts)
-- 		if is_callable(opts.args) then
-- 			get_args = opts.args
-- 		elseif opts.args then
-- 			get_args = function()
-- 				return opts.args
-- 			end
-- 		end
-- 		return adapter
-- 	end,
-- })

return adapter
